# Nome da aplicação
spring.application.name=gym_management

# DataSource Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/gym_management
spring.datasource.username=root
spring.datasource.password=qualBanco404
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA/Hibernate Configuration
# 'update' tenta atualizar o esquema existente, adicionando tabelas/colunas faltantes.
# É bom para desenvolvimento, mas em produção, prefira 'none' ou 'validate' com Flyway/Liquibase.
# Se você quiser que o Hibernate recrie TODAS as tabelas do zero a cada vez, use 'create-drop' (cuidado: apaga todos os dados!)
spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Remova ou comente esta linha, o Hibernate detecta o dialeto automaticamente
# E o MySQL8Dialect foi depreciado, use org.hibernate.dialect.MySQLDialect se precisar especificar
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Adicione esta linha para garantir que o data.sql seja executado APÓS a criação/atualização do esquema.
# Isso é crucial para que as roles, cargos, etc., sejam inseridos nas tabelas recém-criadas/atualizadas.
spring.jpa.defer-datasource-initialization=true

# Garante que o data.sql seja executado sempre que a aplicação iniciar.
spring.sql.init.mode=always

# --- Configurações JWT ---
# GERE UMA CHAVE SEGURA AQUI. Exemplo: use uma ferramenta online para gerar uma chave Base64 de 256 bits (32 bytes).
# A chave que você forneceu é um bom exemplo de formato.
application.jwt.secret=SqtCdYkY660dxejexzjLcEKWojsjMOYwufK/HNZ4OObE7evbQKudTaOgy4xeF2pe
application.jwt.expiration-ms=3600000
# 1 hora em milissegundos (60 * 60 * 1000)

# CONFIGURAÇÕES DE EMAIL
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=email@gmail.com
spring.mail.password=uort zvwc hxim qgea
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true